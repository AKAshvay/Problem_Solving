// 1st approach >  sorting plus  binary search
class Solution
{
    // arr[]: input array
    // n: size of the array
    //Function to find triplets with zero sum.
    public boolean binaryS(int l,int r,int key,int[] arr)
    {
        while(l<=r)
        {
            int mid=l+(r-l)/2;
            if(arr[mid]==key) return true;
            else if(arr[mid]>key) r=mid-1;
            else l=mid+1;;
        }
        
        return false;
    }
	public boolean findTriplets(int arr[] , int n)
    {
        //brute force T.C- (ON^2*logN) + O(nlogn)
        Arrays.sort(arr);
        int sum=0;
        for(int i=0;i<n-2;i++)
        {
            sum=arr[i];
            for(int j=i+1;j<n-1;j++)
            {
                sum=arr[i];
                sum+=arr[j];
                
                int key=-(sum);
                if(binaryS(j+1,n-1,key,arr)) return true;
            }
        }
        
        return false;
    }
}

// 2nd approach> sorting plus 2 pointer approach
class Solution
{
    // arr[]: input array
    // n: size of the array
    //Function to find triplets with zero sum.
	public boolean findTriplets(int arr[] , int n)
    {
        //brute force T.C- (ON^2*logN) + O(nlogn)
        Arrays.sort(arr);
        int sum=0;
        for(int i=0;i<n-2;i++)
        {
            int l=i+1;
            int r=n-1;
            while(l<r)
            {
                sum=arr[i]+arr[l]+arr[r];
                if(sum==0) return true;
                else if(sum<0) l++;
                else r--;
            }
        }
        
        return false;
    }
}
