class Solution
{
    int LCS(int i,int j,String str1,String str2,int[][] dp)
    {
        if(i<0 || j<0) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        
        if(str1.charAt(i)==str2.charAt(j)) return dp[i][j]=1+LCS(i-1,j-1,str1,str2,dp);
        else return dp[i][j]=Math.max(LCS(i-1,j,str1,str2,dp),LCS(i,j-1,str1,str2,dp));
    }
    public int longestPalinSubseq(String S)
    {
        //code here
        StringBuilder sb=new StringBuilder(S);
        sb.reverse();
        String reverse=sb.toString();
        int[][] dp=new int[S.length()][S.length()];
        for(int[] arr:dp) Arrays.fill(arr,-1);
        
        return LCS(S.length()-1,S.length()-1,S,reverse,dp);
    }
}
