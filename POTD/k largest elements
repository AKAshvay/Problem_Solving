class Solution {
    void heapify(int i,int[] arr,int n)
    {
        int largest=i;  // parent
        int left=2*i+1; // left child
        int right=2*i+2;    // right child
        
        if(left<n && arr[i]<arr[left]) largest=left;
        if(right<n && arr[largest]<arr[right]) largest=right;
        
        if(i!=largest)
        {
            int temp=arr[largest];
            arr[largest]=arr[i];
            arr[i]=temp;
            
            heapify(largest,arr,n);
        }
    }
    int[] kLargest(int[] arr, int n, int k) {
        // using extract max from max heap
        for(int i=n/2-1;i>=0;i--) heapify(i,arr,n); // heapify all the internal nodes
        
        int[] ans=new int[k];
        int idx=0;
        for(int i=1;i<=k;i++)
        {
            ans[idx++]=arr[0];
            int temp=arr[0];
            arr[0]=arr[n-i];
            arr[n-i]=temp;
            
            heapify(0,arr,n-i);
        }
        return ans;
    }
}
