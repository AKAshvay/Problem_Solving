java solution step by step -:

1> recursion O(2^n)

(TOP DOWN) i.e. traversing from ans to base case

class Solution{
    public int F(int i,int sum,int price[])
    {
        // base case
        if(i<0) return 0;
        
        // choices at every nodes
        int pick=0;
        if(sum-(i+1)>=0) pick=price[i]+F(i,sum-(i+1),price);    // infinite supply of each length
        int npick=F(i-1,sum,price);
        
        return Math.max(pick,npick);
    }
    public int cutRod(int price[], int n) {
        //T.C- O(2^n)
        return F(n-1,n,price);
    }
}
2> memoization T.C-O(N*N) S.C-(N*N)

(TOP DOWN)

class Solution{
    int dp[][];
    public int F(int i,int sum,int price[])
    {
        // base case
        if(i<0) return 0;
        if(dp[i][sum]!=-1) return dp[i][sum];
        
        // choices at every nodes
        int pick=0;
        if(sum-(i+1)>=0) pick=price[i]+F(i,sum-(i+1),price);    // infinite supply of each length
        int npick=F(i-1,sum,price);
        
        return dp[i][sum]=Math.max(pick,npick);
    }
    public int cutRod(int price[], int n) {
        //T.C- O(2^n)
        dp=new int[n][n+1];
        for(int arr[]:dp) Arrays.fill(arr,-1);
        return F(n-1,n,price);
    }
}
