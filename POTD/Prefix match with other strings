class Solution
{
    public int klengthpref(String[] arr, int n, int k, String str)
    {
        // code here
        if(k>str.length()) return 0;
        Trie obj=new Trie();
        StringBuilder sb=new StringBuilder("");
        
        for(int i=1;i<=k;i++)
        {
            sb.append(str.charAt(i-1));
        }
        obj.insert(sb.toString());
        
        int count=0;
        for(String word:arr)
        {
            if(word.length()<k) continue;
            StringBuilder sb1=new StringBuilder("");
            for(int i=1;i<=k;i++)
            {
                sb1.append(word.charAt(i-1));
            }
            
            if(obj.search(sb1.toString()))
            {
                count++;
            }
        }
        
        return count;
    }
}

class Node{
    boolean flag;
    Node[] links=new Node[26];
    
    boolean contains(char ch)
    {
        return links[ch-'a']!=null;
    }
    void put(char ch)
    {
        links[ch-'a']=new Node();
    }
    
    Node get(char ch)
    {
        return links[ch-'a'];
    }
    
    void setEnd()
    {
        flag=true;
    }
}
class Trie{
    Node root;
    
    Trie(){
        root=new Node();
    }
    
    void insert(String word)
    {
        Node node=root;
        for(int i=0;i<word.length();i++)
        {
            char ch=word.charAt(i);
            if(!node.contains(ch))
            {
                node.put(ch);
            }
            node=node.get(ch);  // moves to next refrence node
        }
        
        node.setEnd();
    }
    boolean search(String word)
    {
        Node node=root;
        
        for(int i=0;i<word.length();i++)
        {
            char ch=word.charAt(i);
            
            if(!node.contains(ch)) return false;
            else{
                node=node.get(ch);
            }
        }
        return node.flag;
    }
    
    boolean startsWith(String word)
    {
        Node node=root;
        
        for(int i=0;i<word.length();i++)
        {
            char ch=word.charAt(i);
            
            if(!node.contains(ch)) return false;
            else{
                node=node.get(ch);
            }
        }
        return true;
    }
}
