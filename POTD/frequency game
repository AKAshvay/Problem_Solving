// c++ 😎
class Solution{
public:
    int LargButMinFreq(int arr[], int n) {
        // code here
        unordered_map<int,int> map;   // element (as key) and frequencly (as value)
        for(int i=0;i<n;i++) 
        {
            if(map.find(arr[i])==map.end()) // not found
            {
                map[arr[i]]=1;
            }
            else{
                int frequency=map[arr[i]];
                frequency++;
                map[arr[i]]=frequency;
            }
        }
        
        int minFrequency=arr[0]; //frequency;
        for(auto i:map)
        {
            minFrequency=min(minFrequency,i.second);
            //cout<<i.first<<"->"<<i.second<<endl;
        }
        int ans=-1;
        for(auto i:map)
        {
            if(i.second==minFrequency) ans=max(ans,i.first);
        }
        
        return ans;
    }
};

// java code 👀🤷‍♂️
class Solution {
    // Function to find largest number with minimum frequency
    public static int LargButMinFreq(int arr[], int n) {
        // Your code here
        HashMap<Integer,Integer> map=new HashMap();
        // prepare a hash map of elements with thrir frequency
        for(int i=0;i<n;i++)
        {
            if(map.containsKey(arr[i])) 
            {
                int frequency=map.get(arr[i]);
                frequency++;
                map.put(arr[i],frequency);
            }
            else map.put(arr[i],1);
        }
        
        int minF=100000;
         for(Map.Entry<Integer,Integer> entry : map.entrySet()) 
         {
            int key=entry.getKey();
            int value=entry.getValue(); // value is frequency in our case
            
            minF=Math.min(minF,value);
         }
         
         int ans=-1;
          for (Map.Entry<Integer,Integer> entry : map.entrySet()) 
          {
             int key=entry.getKey();
             int value=entry.getValue(); // value is frequency in our case
             
             if(value==minF) ans=Math.max(key,ans);
          }
          
          return ans;
    }
}
