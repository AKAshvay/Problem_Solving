class HeapSort{
    public static void heapify(int[] arr,int i,int n){  // max_heapify
        int largest=i;
        int l=2*i+1;
        int r=2*i+2;

        if(l<n && arr[l]>arr[largest]) largest=l;
        if(r<n && arr[r]>arr[largest]) largest=r;

        if(i!=largest)
        {
            int temp=arr[i];
            arr[i]=arr[largest];
            arr[largest]=temp;

            heapify(arr, largest, n);
        }
    }
    public static void heapSort(int[] arr){
        // step 1 build max heap  // O(N)
        int n=arr.length;
        for(int i=n/2-1;i>=0;i--)       // heapify all the internal nodes one by one  
        heapify(arr,i,n);               // leaf nodes are already heapified so no need

        //step 2 swap(max,arr[0]) and heapify it for n-1 times
        // in other words it is extract max from max heap algorithm
        for(int i=n-1;i>0;i--)  //O((N-1)*logN)
        {
            int temp=arr[0];
            arr[0]=arr[i];
            arr[i]=temp;

            heapify(arr,0,i); // O(logN)
        }
    }
    public static void main(String[] args){
        int arr[]={8,4,1,9,5,7};
        heapSort(arr);  // overall Time complexity - O(NlogN) 
        for(int val:arr) System.out.print(val+" "); // elements will get sorted in ascending order
    }
}
