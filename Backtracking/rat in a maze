class Solution {
    public static void DFS(int i,int j,int[][] matrix,boolean[][] visited,int n,ArrayList<String> list,String str)
    {
        if(i<0 || i>=n || j<0 || j>=n) return;  // out of range
        if(matrix[i][j]==0) return; // 0 is wall 
        if(visited[i][j]) return;   // already visited
        
        if(i==n-1 && j==n-1)
        {
            list.add(str);
            return;
        }
        
        visited[i][j]=true; // mark it as visisted
        
        DFS(i-1,j,matrix,visited,n,list,str+'U');
        DFS(i+1,j,matrix,visited,n,list,str+'D'); 
        DFS(i,j-1,matrix,visited,n,list,str+'L');
        DFS(i,j+1,matrix,visited,n,list,str+'R');
        
        
        //for backtracking 
        visited[i][j]=false;
    }
    public static ArrayList<String> findPath(int[][] m, int n) {
        // Your code here
        ArrayList<String> list=new ArrayList<>();
        boolean[][] visited=new boolean[n][n];
        for(boolean[] arr:visited) Arrays.fill(arr,false);
        
        String str="";
        DFS(0,0,m,visited,n,list,str);   // try out all the possible
        return list;
    }
}
